% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modelCompLRT.R
\name{modelCompLRT}
\alias{modelCompLRT}
\title{modelCompLRT}
\usage{
modelCompLRT(
  df,
  covariates,
  patientCol,
  bioCols,
  ind_cov,
  REML,
  printFormula = TRUE,
  resultsFolder = "results"
)
}
\arguments{
\item{df}{A given dataframe}

\item{covariates}{Vector with the covariates that we want to include in the model.}

\item{patientCol}{Name of the ID or patient column in the top-table.}

\item{bioCols}{Range of columns with biomarker information (e.g., 16:300)}

\item{ind_cov}{Individual covariates for which we want to test the interaction
with the biomarkers. They will be included as fixed effects in all models.}

\item{REML}{Algorithm used for estimating the model parameters. It is recommended
to set it as FALSE (it will use ML) if we are comparing models.}

\item{printFormula}{Print the formula of the different models in the console
(TRUE by default).}

\item{resultsFolder}{Name of the directory in which the results will be stored
("results" by default).}
}
\value{
A table with the summary of the model comparison.
}
\description{
This function takes in several arguments: a dataframe "df", a vector of
covariates ("covariates"), the name of the ID or patient column ("patientCol"),
a range of columns with biomarker information ("bioCols"), individual covariates
for which we want to test the interaction with the biomarkers ("ind_cov"), the
algorithm used for estimating the model parameters ("method"), and a flag to
indicate whether to print the formula of the different models ("printFormula").
The purpose of this function is to find if the interaction of some covariates
with the individual covariates has an influence in the dependent variable,
which in this case is a list of biomarkers.
For each covariate, the function generates two models: one
including the interaction between the covariate and the individual covariates
and another without the interaction. The function then calls the lmeModelComp
function to compare the models, and stores the results in a dataframe.
The function then summarizes the number of biomarkers with a p-value below
0.05 for each covariate, and returns a table with this summary.
}
