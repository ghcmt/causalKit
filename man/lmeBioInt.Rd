% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lmeBioInt.R
\name{lmeBioInt}
\alias{lmeBioInt}
\title{lmeBioInt}
\usage{
lmeBioInt(
  df,
  bio_names,
  ind_cov,
  patientCol,
  depVar,
  covariates = NULL,
  fixedFormula,
  randomFormula,
  REML
)
}
\arguments{
\item{df}{A given dataframe}

\item{bio_names}{Vector with the names of the biomarkers to test.}

\item{ind_cov}{Individual covariates for which we want to test the interaction
with the biomarkers. They will be included as fixed effects in all models.}

\item{patientCol}{Name of the ID or patient column in the top-table.}

\item{depVar}{Dependent variable, as clinical outcome or score.}

\item{covariates}{Vector with the covariates that we want to include in the model
(NULL by default to test interaction of individual covariates with biomarkers).}

\item{fixedFormula}{Formula of the Fixed Effects of the Model.}

\item{randomFormula}{Formula of the Random Effects of the Model.}

\item{REML}{Algorithm used for estimating the model parameters. It is recommended
to set it as FALSE (it will use ML) if we are comparing models.}
}
\value{
A dataframe with the results of the different linear models.
}
\description{
This function, named "lmeBioInt", is a part of a package designed to perform
linear mixed-effects modeling in R. The purpose of this function is to fit a
linear mixed-effects model to test the interaction between given biomarkers
and individual covariates (with the optional addition of other covariates in
the model) in a given data frame. The function takes a data frame as input
along with the names of the biomarkers and individual covariates to test,
the name of the patient column, the dependent variable, the covariates
to include in the model (optional, NULL by default), the formulas for fixed
and random effects, and the method used for estimating the model parameters (REML).
The function first identifies the indexes of the biomarkers, patient, and
individual covariates and creates a data frame to store the results. Then,
the function loops through each biomarker and generates a linear model with
the provided information. Then, it extracts the summary table and creates a
dataframe with model information, including the predicted value of the model,
marginal and conditional residuals, and outliers. Finally, the function
calculates the AIC and returns a data frame with all the information. The
function uses the "lme" function from the "nlme" package to fit the model.
}
